React Tutorial Notes

Youtube Channel: Programming with Mosh
Video Title: TypeScript Tutorial for Beginners
URL: https://www.youtube.com/watch?v=d56mG7DezGs

What is typescript
Why use typescript
How is it different from vanilla JS?

Purpose: to overcome some of the shortcomings of JS
TS is built off of JS
every JS file is a valid TS file

Benefits
    - Static typing
    - Code completion
    - Refactoring
    - Shorthand notations

With statically-typed (ST) languages, the type of variable is known when the code is compiled
With DT languages the types are defined at runtime, and can change

Dynaically-typed languages are great for allowing you to do thing

For example, running Math.round(number) is good when "number" is equal to 5
However, running that when "number" is equal to "five" would be bad

You may not want to allow the code to compile when number is "five"
You probably wouldn't ever, but sometimes whether code is (or should be) valid or not isn't always so clear

Put in another way, TS is JS with type-checking (and some other things, discussed later)
(if you're familiar with Java, this may be familiar to you)

This typing also makes it easier to know whether or not you're "using a variable in incorrect contexts", in a non-technical sense

Code Completiong and Recactoring are also made possible from type-checking

With TS, a compilation process is always involved - because browsers don't understand TS
Instead, TS code is compiled into JS, a process known as "Transpilation"

In general, though simple applications are great candidates for JS, larger projects (especially those involving teams) are better off handled by TS

To compile TS into JS, in terminal, run > tsc index.ts

Notice that even though types are specified within TS files, when it is compiled into JS, there's no mention of types (because vanilla JS doesn't use/read types)

An important part of using TS when you start is to first run [tsc --init] in terminal to create a file to define configuration of TS

It's also a good idea to configure a launch.json file (see example in git)

With VS Code, TS allows you to use debuggers to see variables as they change, even adding "watchers" (google is your friend here for more info)

JS has built-in types like:
    number
    string
    boolean
    null
    undefined
    object

TS includes types such as
    any
    unknown
    never
    enum
    tuple

With TS, you can separate digits and it still be considered a number, helpful for readability, such as 1_800_605_4512 (may or may not be a real number - don't know, don't care)

You can remove annotations from variable declarations, since TS can infer types when they are being initialized

If using the "any" type (which is what you get by not defining the type) -> but doing so avoids the entire benefit of type-checking (the major feature of TS)!

Many functions, like [function render(document) {console.log(document)}] will have compilation errors, because the function prohibits the "any" type

As a solution, you can explictly annotate the the variable with the "any" type when passing it to the function, such as in function [render(document: any)]

You could also turn off "strict" mode by changing line (after uncommenting) to []"noImplicitAny": false] - since this removes the main benefit of TS, this is basically a "nuclear" option, and typically isn't a good idea